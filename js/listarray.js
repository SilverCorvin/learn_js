function listArray() {

    // Переводим код в режим соответствия современному стандарту
    'use strict';

    // Определяем переменные и их типы
    let txt = '',
        num = 0,
        element = 0,
        len = 0,
        list = {},
        new_obj = {},
        array = [];

    // Добавляем заголовок 3-го уровня
    txt = '<h3>Задание 1</h3>';

    // Добавляем горизонтальную черту
    txt += '<hr>';

    // Добавляем блок с динамическими данными на страницу
    txt += '<div class="code-data">';

    // Задаем массив с 4-мя элементами
    array = [1, 2, 3, 4];

    // Добавляем данные о массиве на страницу
    txt += `<p><b>Массив</b>: ${array}</p>`;

    // Вычисляем длину массива для последующей итерации по нему
    len = array.length;

    // Функция создания односвязного списка из массива
    function arrayToList(array) {

        // Задаем объект равным корневому объекту
        new_obj = list;

        // Итерируем по элементам массива
        for (element in array) {

            // Задаем value текущего объекта равным текущему элементу
            new_obj.value = array[element];

            // Проверяем если элемент последний в массиве, то
            if (element == len - 1) {

                // Задаем rest последнего дочернего объекта равным null
                new_obj.rest == null;

            }

            // Если не последний, то
            else {

                // Задаем rest текущего объекта равным новому объекту
                new_obj.rest = {};

                // Переходим в дочерний объект
                new_obj = new_obj.rest;
            }
        }


        new_obj.rest = null;
    }

    // Вызываем функцию создания односвязного списка из массива
    arrayToList(array);

    // Добавляем информацию об односвязном списке на страницу
    // JSON.stringify преобразует list в строку JSON
    txt += `<p><b>Односвязный список</b>: ${JSON.stringify(list)}</p>`;

    // Функция создания массива из односвязного списка
    function listToArray(list) {

        // Обнуляем массив
        array = [];

        // Задаем текущий объект равным корневому
        new_obj = list;

        // Проверям что rest текущего объекта не null,
        // иначе мы достигли дочернего элемента
        while (new_obj.rest != null) {

            // Добавляем в конец массива value текущего объекта
            array.push(new_obj.value);

            // Переходим в дочерний объект
            new_obj = new_obj.rest;
        }

        // Добавяем последний value в массив
        array.push(new_obj.value);

        // Возвращаем массив из функции
        return array;
    }

    // Вызываем функцию создания массива из односвязного списка
    array = listToArray(list);

    // Добавляем информацию о полученном массиве на страницу
    txt += `<p><b>Полученный массив</b>: ${array}<p>`;

    // Функция создает объект с заданным value и дочерним объектом
    function prepend(element) {

        // Создаем корневой объект
        new_obj = {}

        // Задаем value равным значению элемента
        new_obj.value = element;

        // Задаем rest равным новому объекту
        new_obj.rest = {};
    }

    // Вызываем функцию prepend с значением 1
    prepend(1);

    // Добавляем информацию об объекте на страницу
    // JSON.stringify преобразует new_obj в строку JSON
    txt += `<p><b>Объект полученный при помощи prepend</b>: ${JSON.stringify(new_obj)}</p>`;

    // которая в качестве аргументов принимает список и число,
    // а возвращает элемент на заданной позиции в списке,
    // или же undefined в случае отсутствия такого элемента.

    // Обнуляем значение element
    element = 0;

    // Функция возвращает value объекта для заданной глубины
    function nth(list, num) {

        // Проверяем если мы находимся на нужном уровне вложенности
        // и объект не null
        if (element == num && list != null) {

            // Если да, то возвращаем value текущего объекта
            return list.value;
        }

        // Если нет, то
        else {
            // Проверям, что текущий объект не null
            if (list != null) {

                // Если нет, то вызываем nth рекурсивно и 
                // переходим к следуещему узлу(дочернему объекту)
                return nth(list.rest, num, element++);
            }

            // В противном случае для заданной глубины объекта нет
            else {

                // Возвращаем undefined
                return undefined;
            }
        }
    }

    // Добавляем на страницу вывод вызова nth для трёх случаев
    txt += `<p><b>Глубина 0</b>: значение равно ${nth(list,0)}</p>`;
    // Обнуляем элемент
    element = 0;
    txt += `<p><b>Глубина 2</b>: значение равно ${nth(list,2)}</p>`;
    // Обнуляем элемент
    element = 0;
    txt += `<p><b>Глубина 4</b>: значение равно ${nth(list,4)}</p>`;

    // Добавляем закрытие блока с динамическими данными на страницу
    txt += '</div>';

    // Добавляем данные из переменной txt в блок "code-box"(div id="code-box")
    document.getElementById("code-box").innerHTML = txt;
}
